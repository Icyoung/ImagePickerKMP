name: CI

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Show environment and gradle info
        run: |
          echo "=== Environment Info ==="
          java -version
          echo "Gradle version:"
          ./gradlew --version
          echo "=== Gradle Wrapper Properties ==="
          cat gradle/wrapper/gradle-wrapper.properties
          echo "=== Project Structure ==="
          ls -la
          echo "=== Library Directory ==="
          ls -la library/

      - name: Build with debug info
        run: ./gradlew build --no-daemon --stacktrace --info

      - name: Run tests with debug
        run: ./gradlew test --no-daemon --stacktrace --info
        continue-on-error: true

      - name: Run ktlint with debug
        run: ./gradlew ktlintCheck --no-daemon --stacktrace --info
        continue-on-error: true

      - name: Run detekt with debug
        run: ./gradlew detekt --no-daemon --stacktrace --info
        continue-on-error: true

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            library/build/
            .gradle/
          retention-days: 7

      - name: Generate JaCoCo coverage report
        run: ./gradlew jacocoTestReport --no-daemon --stacktrace --info

      - name: Verify coverage thresholds
        run: ./gradlew jacocoTestCoverageVerification --no-daemon --stacktrace --info

      - name: Check JaCoCo report generation
        run: |
          echo "=== Checking JaCoCo report generation ==="
          ls -la library/build/reports/ || echo "No reports directory"
          ls -la library/build/reports/jacoco/ || echo "No jacoco directory"
          ls -la library/build/reports/jacoco/jacocoTestReport/ || echo "No jacocoTestReport directory"
          if [ -f "./library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml" ]; then
            echo "✅ JaCoCo XML report exists"
            ls -la "./library/build/reports/jacoco/jacocoTestReport/"
          else
            echo "❌ JaCoCo XML report missing"
          fi

      - name: Parse coverage data
        id: coverage
        run: |
          echo "=== Checking for JaCoCo report ==="
          ls -la library/build/reports/jacoco/ || echo "No jacoco directory found"
          ls -la library/build/reports/jacoco/jacocoTestReport/ || echo "No jacocoTestReport directory found"
          
          if [ -f "./library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml" ]; then
            echo "✅ JaCoCo XML report found"
            # Extract line coverage percentage
            LINE_COVERAGE=$(grep -o 'LINE="[^"]*"' ./library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml | head -1 | grep -o '[0-9.]*' || echo "0")
            BRANCH_COVERAGE=$(grep -o 'BRANCH="[^"]*"' ./library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml | head -1 | grep -o '[0-9.]*' || echo "0")
            
            echo "Line coverage: $LINE_COVERAGE"
            echo "Branch coverage: $BRANCH_COVERAGE"
            
            echo "line_coverage=$LINE_COVERAGE" >> $GITHUB_OUTPUT
            echo "branch_coverage=$BRANCH_COVERAGE" >> $GITHUB_OUTPUT
            echo "has_coverage=true" >> $GITHUB_OUTPUT
          else
            echo "❌ JaCoCo XML report not found"
            echo "line_coverage=0" >> $GITHUB_OUTPUT
            echo "branch_coverage=0" >> $GITHUB_OUTPUT
            echo "has_coverage=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: library/build/reports/jacoco/jacocoTestReport/
          retention-days: 7

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Comment PR with coverage summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              // Read the JaCoCo XML report to extract coverage data
              const xmlPath = './library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml';
              if (fs.existsSync(xmlPath)) {
                const xmlContent = fs.readFileSync(xmlPath, 'utf8');
                
                // Extract coverage percentages using regex
                const lineMatch = xmlContent.match(/LINE="(\d+\.?\d*)"/);
                const branchMatch = xmlContent.match(/BRANCH="(\d+\.?\d*)"/);
                
                if (lineMatch && branchMatch) {
                  const lineCoverage = parseFloat(lineMatch[1]);
                  const branchCoverage = parseFloat(branchMatch[1]);
                  
                  const comment = `## 📊 Coverage Report
                  
                  **Line Coverage:** ${lineCoverage.toFixed(1)}%
                  **Branch Coverage:** ${branchCoverage.toFixed(1)}%
                  
                  📈 View detailed report: [Codecov](https://codecov.io/gh/ismoy/ImagePickerKMP)
                  
                  ---
                  *This report was generated automatically by CI*`;
                  
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: comment
                  });
                }
              }
            } catch (error) {
              console.log('Could not generate coverage comment:', error.message);
            }

      - name: Notify coverage changes
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const xmlPath = './library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml';
              if (fs.existsSync(xmlPath)) {
                const xmlContent = fs.readFileSync(xmlPath, 'utf8');
                const lineMatch = xmlContent.match(/LINE="(\d+\.?\d*)"/);
                
                if (lineMatch) {
                  const coverage = parseFloat(lineMatch[1]);
                  
                  if (coverage < 20) {
                    console.log('⚠️ Coverage is below 20%. Consider adding more tests.');
                  } else if (coverage < 50) {
                    console.log('📈 Coverage is improving. Keep adding tests!');
                  } else {
                    console.log('🎉 Great coverage! Keep it up!');
                  }
                }
              }
            } catch (error) {
              console.log('Could not analyze coverage:', error.message);
            }

      - name: Notify Discord on Success
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            🎉 **Build Success** - ImagePickerKMP
            
            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            
            ${{ steps.coverage.outputs.has_coverage == 'true' && format('📊 **Coverage Report:**\n• Line Coverage: {0}%\n• Branch Coverage: {1}%', steps.coverage.outputs.line_coverage, steps.coverage.outputs.branch_coverage) || '📊 **Coverage:** Not available' }}
            
            **Duration:** ${{ github.run_duration }}s
            **Workflow:** ${{ github.workflow }}
            
            🔗 **PR:** ${{ github.event.pull_request.html_url || 'N/A' }}
            🔗 **View Details:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Notify Discord on Failure
        if: failure()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ❌ **Build Failed** - ImagePickerKMP
            
            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            
            **Duration:** ${{ github.run_duration }}s
            **Workflow:** ${{ github.workflow }}
            
            🔗 **PR:** ${{ github.event.pull_request.html_url || 'N/A' }}
            🔗 **View Details:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} 